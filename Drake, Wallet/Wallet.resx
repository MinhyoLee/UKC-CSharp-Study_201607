<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AA///wAf//8A////////////
</value>
  </data>
</root>